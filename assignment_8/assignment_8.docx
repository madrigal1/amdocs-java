Problem Statement 1: Multithreading

1. Write a Java program which accepts multiple employeesâ€™ details and perform the following:

Ans:

a) Code:
package assignment_8;

import java.util.concurrent.ForkJoinPool;

public class EmployeeThread implements Runnable {
    private String name;
    private double salary;

    public EmployeeThread(String name, double salary) {
        this.name = name;
        this.salary = salary;
    }

    @Override
    public void run() {
        System.out.println("Employee " + name + " has a salary of $" + salary);
    }

    public static void main(String[] args) {
        // Create an array of EmployeeThread objects
        EmployeeThread[] employees = new EmployeeThread[5];
        employees[0] = new EmployeeThread("Alice", 45000);
        employees[1] = new EmployeeThread("Bob", 50000);
        employees[2] = new EmployeeThread("Charlie", 55000);
        employees[3] = new EmployeeThread("Dave", 60000);
        employees[4] = new EmployeeThread("Eve", 65000);

        // Create a ForkJoinPool and execute the EmployeeThreads
        ForkJoinPool pool = new ForkJoinPool();
        for (EmployeeThread employee : employees) {
            pool.execute(employee);
        }
        pool.close();
    }
}

Screenshot:


a. Create thread class.

b. Execute them using frokjoinpool.

c. Make use of runnable interface in it.

2.

a. Write a program which implements threads with locks by using synchronized keyword.

b. Write a program which elaborates the concept of producer consumer problem using wait(), notify() & all required functionalities in it.

c. Write a program with data structure using atomic methods like get(), incrementAndGet(), decrementAndGet(), compareAndSet(). Also use all other functionalities to make the program more responsive.

Problem Statement 2: Multithreading

1. Write a Java program to create a thread by using Thread class and also by using

the Runnable interface and display the details of thread like, thread name, id, priority, its phase and other details.

2. Write a Java program to create three different threads, with first thread displaying numbers from 101 to 200, second from 201 to 300 and third from 301 to 400. Verify that all the threads are running simultaneously or not.